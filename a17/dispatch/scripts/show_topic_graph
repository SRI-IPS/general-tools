#!/bin/bash
#
# Shows graph of dispatch nodes and topics.
#
# This script greps through the source code to build a dispatch topic graph.
# It assumes that nodes names are similar to their filename, and that topics are capital letters with at least one / character. 
# There are a few cases where this is incorrect, so this should be considered an approximate graph.
#
# If you want to highlight or remove portions of the graph, there are examples at the end of this script.
#
# TODO(StefanJorgensen): add options for file output/.gv storage

usage="$(basename "$0") [-h] -- Compute and display dispatch topic graph. 

The graph is generated by searching source code for topics. Assumes topics are all caps (can contain numbers and forward slashes) and that file names correspond to dispatch node names. 

Square nodes correspond to dispatch topics, round nodes correspond to dispatch nodes.

If you want to highlight or remove portions of the graph, this is easiest to do within the script (see examples at the end of the file).

where:
    -h  show this help text "

# Change to toggle displaying the image after generating it. 
show_graph=true;

while getopts ':h' option; do
  case "$option" in
    h) echo "$usage"
       exit
       ;;
   \?) printf "illegal option: -%s\n" "$OPTARG" >&2
       echo "$usage" >&2
       exit 1
       ;;
  esac
done
shift $((OPTIND - 1))


start_dir=$(pwd)
cd $A17_ROOT/src/a17
tmp_topic_list=$(mktemp)
tmp_topic_names=$(mktemp)
tmp_graph_file=$(mktemp)
tmp_sort_file=$(mktemp)

# Grep for list of topics and their locations
search_string='\"[A-Z0-9]\{1,\}\/[A-Z0-9]\{1,\}\"'
grep -rn --include \*.cpp --include \*.h --include \*.py $search_string > $tmp_topic_list

# Basic preprocessing
#   Remove test files (hard to parse)
sed -i '/.*test.*\(\.py\|\.cpp\|\.h\)/d' $tmp_topic_list 
#   remove comments
sed -i '/\/\/\|\#/d' $tmp_topic_list 
#   Remove filler
sed -i 's/\(\.py\|\.cpp\|\.h\).*\("[A-Z].*[A-Z]"\).*$/ \2/' $tmp_topic_list 
#   Remove wordy prefixes
sed -i 's/^dispatch\_nodes\///' $tmp_topic_list 
#   Remove duplicated file/directory names
sed -i 's/^\(.*\)\/\1 /\1 /' $tmp_topic_list 

# Create list of topics and format the nodes appropriately:
sed 's/^.*\("[A-Z].*[A-Z]"\).*$/\1/' $tmp_topic_list > $tmp_topic_names 
sort $tmp_topic_names > $tmp_sort_file
mv $tmp_sort_file $tmp_topic_names
sed -i '$!N; /^\(.*\)\n\1$/!P; D' $tmp_topic_names
sed -i '/"[A-Z].*[A-Z]"/!d' $tmp_topic_names
#TODO(StefanJorgensen) make these lines shorter without breaking function
sed -i 's/"\([A-Z].*\)\/\([A-Z].*\)\/\([A-Z].*\)\/\(.*[A-Z]\)"/\1_\2_\3_\4label=[label=\1\/\2\/\3\/\4 shape=box fontsize=6];/' $tmp_topic_names
sed -i 's/"\([A-Z].*\)\/\([A-Z].*\)\/\(.*[A-Z]\)"/\1_\2_\3[label=\1\/\2\/\3 shape=box fontsize=6];/' $tmp_topic_names
sed -i 's/"\([A-Z].*\)\/\(.*[A-Z]\)"/\1_\2[label=\1\/\2 shape=box fontsize=6];/' $tmp_topic_names
sed -i 's/label=\(.*\) shape/label="\1" shape/' $tmp_topic_names

# Remove unnecessary artifacts:
# File endings:
sed -i 's/\.py\|\.cpp\|\.h//' $tmp_topic_list
# Quotations:
sed -i 's/"\(.*\)"/\1/' $tmp_topic_list
# Slashes (this is clumsy)
sed -i 's/\(.*\)\/\(.*\)/\1_\2/' $tmp_topic_list
sed -i 's/\(.*\)\/\(.*\)/\1_\2/' $tmp_topic_list
sed -i 's/\(.*\)\/\(.*\)/\1_\2/' $tmp_topic_list
sed -i 's/\(.*\)\/\(.*\)/\1_\2/' $tmp_topic_list

# Now form into a .gv file:
echo Forming graph file
sed -i 's/ /--/' $tmp_topic_list

# Remove consecutive duplicate lines:
sort $tmp_topic_list > $tmp_sort_file
mv $tmp_sort_file $tmp_topic_list
sed -i '$!N; /^\(.*\)\n\1$/!P; D' $tmp_topic_list
sed -i -n 'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P' $tmp_topic_list

# Add necessary formatting for .gz:
echo 'graph messages {' > $tmp_graph_file
cat $tmp_topic_names >> $tmp_graph_file
cat $tmp_topic_list >> $tmp_graph_file
echo '}' >> $tmp_graph_file
#rm tmp_topic_list
#rm tmp_topic_names



# manual fixes:
# RPLAN should connect to the (R,G) plan.
sed -i 's/RPLAN/PLAN/' $tmp_graph_file

# Remove nodes which are uninteresting for planning:
#sed -i '/gazebo/Id' tmp_graph_file

# highlight nodes which are interesting for path planning
#sed -i 's/\(PLAN.*\)];/\1 style=filled fillcolor=gold];/' tmp_graph_file
#sed -i 's/\(plan.*--.*\)$/\1[weight=2 penwidth=8 color=gold];/' tmp_graph_file

echo Generating graph image \(this may take time\)
# generate graph
fdp -Tpng $tmp_graph_file -o $start_dir/topic_graph.png
if [ $show_graph == true ]; then
	eog $start_dir/topic_graph.png
fi
